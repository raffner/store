# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]

services:
    # Nom du bundle complet, nom de la classe
    store.backend.email: #Nom du service
      class: Store\BackendBundle\Email\Email
      arguments: ["@mailer", "@twig"] #les deux arguments dont j'ai besoin : service Swift mailer et service Twig

    #nom du service
    store.backend.notification:
            # classe avec namespace
            class: Store\BackendBundle\Notification\Notification
            #les arguments du constructeur de ma classe en service
            arguments: ["@session"]

    Store.backendBundle.twig.backend_store_extension:
            # Notre classe qui va étendre twig
            class: Store\BackendBundle\Twig\Extensions\StoreBackendExtension
            tags:
                - { name: twig.extension }



    store.backend.listener.authentification:

      # Nom de la classe que je déclare en tant que service
       #Nom du service : qui pourra être utilisé partout car il contient les services voulus en injectant les bons arguments : ex.
      class: Store\BackendBundle\Listener\AuthentificationListener

       # Le nom des services injectés comme constructeurs de ma classe
       #($em = $this->get("@doctrine.orm.entity_manager")
      arguments: ["@doctrine.orm.entity_manager", "@security.context"]

      # Avec "tags", j'étends le mécanisme de "security" au niveau d el'interaction login avec un mécanisme d'écouteur
      # "Tags" permet de classifier et de greffer la classe à une famille de classe
      # ma classe est déclarée en tant que mécanisme interne du noyau de Symfony.
      # Avec "event", je déclare que ma classe est un écouteur
      # et sera greffée à un événement (ici "security.interactive_login).
      # La méthode onAuthentificationSuccess que l'on crée est déclenchée par l'événement 'event' : la méthode doit être écrite dans la classe
      #AuthentificationListerner
      tags:
        - { name: kernel.event_listener, event: security.interactive_login, method: onAuthentificationSuccess }
